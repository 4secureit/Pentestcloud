#!/bin/bash

# Check if a domain argument is provided
if [ -z "$1" ]; then
  echo "Usage: $0 <domain>"
  exit 1
fi

# Domain provided by the user
DOMAIN=$1

# Output file name
# Directory and file names
DIRECTORY="./2"
OUTPUT_FILE="${DIRECTORY}/2-${DOMAIN}.txt"

# Check if the directory exists, create if not
if [ ! -d "$DIRECTORY" ]; then
  echo "Directory ${DIRECTORY} does not exist. Creating..."
  mkdir -p "$DIRECTORY"
fi

# Function to check if the domain is using Azure
check_domain_azure() {
  local domain=$1
  echo "Checking if domain $domain is associated with Azure..."
  
  # Construct the URL for OpenID Connect configuration
  local url="https://login.microsoftonline.com/$domain/v2.0/.well-known/openid-configuration"
  
  # Send HTTP request and capture the response
  local response=$(curl -s -w "%{http_code}" -o response.json "$url")
  local status_code=$(tail -n1 <<< "$response")
  
  if [ "$status_code" -eq 200 ]; then
    echo "Domain $domain is associated with Azure."
    return 0
  else
    echo "Domain $domain does not appear to be associated with Azure."
    return 1
  fi
}

# Function to retrieve tenant ID from the OpenID Connect configuration
retrieve_tenant_id() {
  echo "Retrieving tenant ID from the OpenID Connect configuration..."
  
  # Extract token_endpoint value from the JSON response
  local token_endpoint=$(grep -oP '"token_endpoint":\s*"\K[^"]+' response.json)
  
  # Extract tenant ID from token_endpoint
  local tenant_id=$(echo "$token_endpoint" | sed -n 's|.*/\([^/]*\)/oauth2/.*|\1|p')
  
  echo "Tenant ID: $tenant_id"
}

# Redirect all output to the specified file
{
  if check_domain_azure "$DOMAIN"; then
    retrieve_tenant_id
  else
    echo "No tenant ID available as the domain is not associated with Azure."
  fi
} > "$OUTPUT_FILE"

# Inform the user where the results have been saved
echo "Results have been saved to the file: $OUTPUT_FILE"
